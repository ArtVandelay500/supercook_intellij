<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--  전체 매퍼 중 유일한 값을 사용하여야 한다.
 해서 관계적으로 해당 파일의 path와 file_name(확장자 제외)
 그리고 dao 에서 namespace와 일치하여야 된다. -->

<mapper namespace="Member">
    <!--select 결과를 받을 객채-->
    <!--mybatis-config에서 alias를 사용중-->

    <sql id="selectField">
       seq,
       email,
        pwd
    </sql>


    <select id="selectList" resultType="member">
        SELECT
            <include refid="selectField"/>
        FROM
            member
    </select>

    <select id="selectOne" resultType="member">
        SELECT
            <include refid="selectField"/>
        FROM
            member
        WHERE
            seq = #{seq}
    </select>



<!--LOGIN SIGNUP MAPPERS-->
<!--LOGIN SIGNUP MAPPERS-->
    <!--LOGIN SESSION-->
    <select id="loginCheck" resultType="member">
        SELECT
            a.seq,
            a.email,
            a.pwd,
            b.path,
            b.uuidName
        FROM
            member AS a
        LEFT JOIN uploadList AS b ON b.pseq = a.seq
        WHERE 1=1
            AND a.email = #{email}
            AND a.pwd = #{pwd}
            AND (b.path IS NULL OR b.path LIKE CONCAT('%memberdto%'));
    </select>
    <!--LOGIN SESSION-->
    <!--SIGNUP ID CHECK-->
    <!--SIGNUP ID CHECK-->
    <select id="signupIdCheck" resultType="member">
        SELECT
            <include refid="selectField"/>
        FROM
            member
        WHERE 1+1
            AND email = #{email}
    </select>
    <!--SIGNUP ID CHECK-->
    <!--SIGNUP ID CHECK-->

    <select id="idCheck" resultType="integer">
        SELECT
            COUNT(seq)
        FROM
            member
        WHERE 1=1
            AND email = #{email}
    </select>



<!--LOGIN SIGNUP MAPPERS-->
<!--LOGIN SIGNUP MAPPERS-->



    <insert id="insert">
        INSERT INTO member (email,pwd)
        VALUES(
                  #{email},
                  #{pwd}
              )

        <selectKey resultType="String" keyProperty="pseq" order="AFTER">
            SELECT last_insert_id()
        </selectKey>
    </insert>

    <update id="update">
        UPDATE member
        SET
            email = #{email},
            pwd = #{pwd}
        WHERE
            seq = #{seq}
    </update>

    <delete id="delete">
        DELETE FROM member WHERE seq = #{seq}
    </delete>
    <delete id="deleteUpload">
        DELETE FROM uploadList
        WHERE 1=1
            AND pseq = #{seq}
            AND path LIKE CONCAT('%memberdto%')
    </delete>

    <!-- uploaded s -->
    <insert id="insertUploaded">
        INSERT INTO ${tableName} (
        type
        ,defaultNy
        ,path
        ,originalName
        ,uuidName
        ,ext
        ,size
        ,delNy
        ,pseq
        ) values (
        #{type}
        ,#{defaultNy}
        ,#{path}
        ,#{originalName}
        ,#{uuidName}
        ,#{ext}
        ,#{size}
        ,0
        ,#{pseq}
        )
    </insert>
<!--UPLOAD SELECT-->
<!--UPLOAD SELECT-->
<select id="selectListUpload" resultType="upload">
    SELECT
        type
        ,path
        ,originalName
        ,uuidName
        ,ext
        ,size
        ,delNy
        ,pseq
    FROM
        uploadList
    WHERE 1+1
        AND path LIKE CONCAT('%memberdto%')
        AND pseq = #{seq}
</select>
<!--UPLOAD SELECT-->
<!--UPLOAD SELECT-->


</mapper>